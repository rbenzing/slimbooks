#!/usr/bin/env pwsh

<#
.SYNOPSIS
    Generate secure secrets for Slimbooks production deployment
.DESCRIPTION
    This script creates cryptographically secure secrets for JWT tokens and generates
    a .env file from .env.example template with secure configuration.
.EXAMPLE
    .\Generate-Secrets.ps1
    Generates secure secrets and creates .env file
.EXAMPLE
    .\Generate-Secrets.ps1 -Force
    Overwrites existing .env file without prompting
#>

[CmdletBinding()]
param(
    [switch]$Force,
    [int]$SecretLength = 64
)

# Set error action preference
$ErrorActionPreference = "Stop"

# Color functions for output
function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    
    $colorMap = @{
        "Red" = "Red"
        "Green" = "Green" 
        "Yellow" = "Yellow"
        "Blue" = "Cyan"
        "White" = "White"
    }
    
    Write-Host $Message -ForegroundColor $colorMap[$Color]
}

function Write-Status {
    param([string]$Message)
    Write-ColorOutput "[OK] $Message" "Green"
}

function Write-Warning {
    param([string]$Message)
    Write-ColorOutput "[WARN] $Message" "Yellow"
}

function Write-Error {
    param([string]$Message)
    Write-ColorOutput "[ERROR] $Message" "Red"
}

function Write-Info {
    param([string]$Message)
    Write-ColorOutput "[INFO] $Message" "Blue"
}

# Function to generate a secure random string
function New-SecureSecret {
    param(
        [int]$Length = 64
    )
    
    # Use .NET RNGCryptoServiceProvider for cryptographically secure random bytes
    $rng = [System.Security.Cryptography.RNGCryptoServiceProvider]::new()
    $bytes = New-Object byte[] $Length
    $rng.GetBytes($bytes)
    $rng.Dispose()
    
    # Convert to base64 and clean up characters that might cause issues
    $base64 = [Convert]::ToBase64String($bytes)
    $cleaned = $base64 -replace '[=+/]', ''
    
    # Return the requested length
    return $cleaned.Substring(0, [Math]::Min($Length, $cleaned.Length))
}

# Main script execution
try {
    Write-Info "Generating secure secrets for Slimbooks..."

    # Check if we're in the correct directory (should have .env.example)
    # If running from scripts directory, move up one level
    $workingDir = $PWD
    if ((Split-Path $PWD -Leaf) -eq "scripts") {
        $workingDir = Split-Path $PWD -Parent
    }

    $envExamplePath = Join-Path $workingDir ".env.example"
    if (-not (Test-Path $envExamplePath)) {
        Write-Error ".env.example file not found. Please run this script from the project root directory or scripts directory."
        exit 1
    }

    # Generate secrets
    Write-Info "Generating cryptographically secure secrets..."
    
    $jwtSecret = New-SecureSecret -Length $SecretLength
    $jwtRefreshSecret = New-SecureSecret -Length $SecretLength
    $sessionSecret = New-SecureSecret -Length $SecretLength
    
    Write-Status "Secrets generated successfully"
    
    # Handle existing .env file
    $envFile = Join-Path $workingDir ".env"
    $backupFile = $null
    
    if (Test-Path $envFile) {
        if (-not $Force) {
            $response = Read-Host "Existing .env file found. Do you want to create a backup? (Y/n)"
            if ($response -eq "" -or $response -match "^[Yy]") {
                $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
                $backupFile = Join-Path $workingDir ".env.backup.$timestamp"
                Copy-Item $envFile $backupFile
                Write-Status "Backup created: $backupFile"
            }
        } else {
            $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
            $backupFile = Join-Path $workingDir ".env.backup.$timestamp"
            Copy-Item $envFile $backupFile
            Write-Status "Backup created: $backupFile"
        }
    }
    
    # Read .env.example template
    Write-Info "Creating .env file from template..."
    
    $envContent = Get-Content $envExamplePath -Raw
    
    # Replace placeholder secrets with generated ones
    $envContent = $envContent -replace 'JWT_SECRET=.*', "JWT_SECRET=$jwtSecret"
    $envContent = $envContent -replace 'JWT_REFRESH_SECRET=.*', "JWT_REFRESH_SECRET=$jwtRefreshSecret"
    $envContent = $envContent -replace 'SESSION_SECRET=.*', "SESSION_SECRET=$sessionSecret"
    
    # Add generation timestamp comment at the top
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $header = "# Generated on $timestamp`r`n# Secure secrets auto-generated by Generate-Secrets.ps1`r`n`r`n"
    $envContent = $header + $envContent
    
    # Write the new .env file
    Set-Content -Path $envFile -Value $envContent -NoNewline
    
    Write-Status ".env file created with secure secrets"
    
    # Display summary information
    Write-ColorOutput "`nSecure secrets generated successfully!" "Green"
    Write-Info "Configuration Summary:"
    Write-Host "  JWT Secret: $($jwtSecret.Substring(0, 16))... ($($jwtSecret.Length) characters)" -ForegroundColor White
    Write-Host "  JWT Refresh Secret: $($jwtRefreshSecret.Substring(0, 16))... ($($jwtRefreshSecret.Length) characters)" -ForegroundColor White
    Write-Host "  Session Secret: $($sessionSecret.Substring(0, 16))... ($($sessionSecret.Length) characters)" -ForegroundColor White

    Write-Info "`nFiles Created:"
    Write-Host "  .env (secure environment configuration)" -ForegroundColor White
    if ($backupFile) {
        Write-Host "  $(Split-Path $backupFile -Leaf) (backup of previous configuration)" -ForegroundColor White
    }
    
    Write-Warning "`nImportant Security Notes:"
    Write-Host "  - Keep your .env file secure and never commit it to version control" -ForegroundColor White
    Write-Host "  - Update CORS_ORIGIN to match your actual domain in production" -ForegroundColor White
    Write-Host "  - Configure email and OAuth settings if you plan to use those features" -ForegroundColor White
    Write-Host "  - Review all configuration values before deploying to production" -ForegroundColor White

    Write-Info "`nNext Steps:"
    Write-Host "  1. Review and customize the .env file as needed" -ForegroundColor White
    Write-Host "  2. Update CORS_ORIGIN if deploying to a different domain" -ForegroundColor White
    Write-Host "  3. Configure optional services (email, OAuth, Stripe) if needed" -ForegroundColor White
    Write-Host "  4. Test your configuration with: npm run dev" -ForegroundColor White

    Write-ColorOutput "`nYour Slimbooks application is now configured with secure secrets!" "Green"
    
} catch {
    Write-Error "Failed to generate secrets: $($_.Exception.Message)"
    exit 1
}
